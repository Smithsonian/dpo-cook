{
    "id": "fcef7b5c-2df5-4a63-8fe9-365dd1a5e39c",
    "name": "si-generate-downloads",
    "description": "Generates download packages based on master assets. Packages include full obj, low obj & gltf & glb, usdz & glb AR, (optional) medium obj & gltf",
    "version": "2",
    "start": "log",

    "parameterSchema": {
        "type": "object",
        "properties": {
            "sourceMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceDiffuseMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceMTLFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "svxFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceRoughMetalMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "outputFileBaseName": {
                "type": "string",
                "minLength": 1
            },
            "generateLowAssets": {
                "type": "boolean",
                "default": true
            },
            "generateMediumAssets": {
                "type": "boolean",
                "default": false
            },
            "generateARAssets": {
                "type": "boolean",
                "default": true
            },
            "generateGlb": {
                "type": "boolean",
                "default": true
            },
            "generateGltf": {
                "type": "boolean",
                "default": true
            },
            "generateUsdz": {
                "type": "boolean",
                "default": true
            },
            "decimationTool": {
                "type": "string",
                "enum": [ "Meshlab", "RapidCompact" ],
                "default": "Meshlab"
            },
            "preDecimatedUnwrappedLowTargetFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "preDecimatedUnwrappedMedTargetFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "preDecimatedUnwrappedARTargetFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "bakeVertexColor": {
                "type": "boolean",
                "default": false
            },
            "diffuseMapQualityLowAR": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 79
            },
            "diffuseMapQualityMedium": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 89
            },
            "occlusionMapQualityLowAR": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 59
            },
            "occlusionMapQualityMedium": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 69
            },
            "normalMapQualityLowAR": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 89
            },
            "normalMapQualityMedium": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 79
            },
            "scaleToMeters": {
                "type": "boolean",
                "default": true
            },
            "numFacesLow": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 150000
            },
            "numFacesAR": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 100000
            },
            "numFacesMedium": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 1000000
            },
            "mapSizeLow": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 4096
            },
            "mapSizeMedium": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 8192
            },
            "mapSizeAR": {
                "type": "integer",
                "minimum": 128,
                "maximum": 4096,
                "default": 2048
            },
            "saveAlpha": {
                "type": "boolean",
                "default": false
            },
            "inspectMesh": {
                "type": "boolean",
                "default": false
            },
            "remeshFaces": {
                "type": "integer",
                "default": 0
            },
            "cleanupMesh": {
                "type": "boolean",
                "default": false
            },
            "unwrapSegmentationStrengthLowAR": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "unwrapSegmentationStrengthMedium": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.6
            },
            "unwrapPackEffort": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "bakeTest": {
                "type": "boolean",
                "default": true
            },
            "maxRayDistance": {
                "type": "number",
                "default": 0
            },
            "occlusionRays": {
                "type": "integer",
                "minimum": 1,
                "maximum": 512,
                "default": 128
            }
        },
        "required": [
            "sourceMeshFile",
            "svxFile"
        ],
        "advanced": [
            "bakeTest", "inspectMesh", "unwrapPackEffort", "unwrapSegmentationStrengthLowAR", "unwrapSegmentationStrengthMedium", "remeshFaces",
            "cleanupMesh", "normalMapQualityLowAR", "normalMapQualityMedium", "occlusionMapQualityLowAR", "occlusionMapQualityMedium",
            "diffuseMapQualityLowAR", "diffuseMapQualityMedium", "occlusionRays", "maxRayDistance", "scaleToMeters", "numFacesLow", "numFacesMedium",
            "numFacesAR", "mapSizeAR", "mapSizeLow", "mapSizeMedium"
        ],
        "additionalProperties": false
    },

    "steps": {
        "log": {
            "task": "Log",
            "description": "Enable logging services",
            "pre": {
                "outputFileBaseName": "$baseName($firstTrue(outputFileBaseName, sourceMeshFile))",
                "baseMeshName": "$baseMeshName($firstTrue(outputFileBaseName, sourceMeshFile))",
                "baseMeshMapNameLow": "$baseMeshMapName($firstTrue(outputFileBaseName, sourceMeshFile), numFacesLow, mapSizeLow)",
                "baseMeshMapNameMedium": "$baseMeshMapName($firstTrue(outputFileBaseName, sourceMeshFile), numFacesMedium, mapSizeMedium)",
                "baseMeshMapNameAR": "$baseMeshMapName($firstTrue(outputFileBaseName, sourceMeshFile), numFacesAR, mapSizeAR)",
                "bakeDiffuse": "$exists(sourceDiffuseMapFile)"
            },
            "parameters": {
                "logToConsole": true,
                "reportFile": "outputFileBaseName & '-report.json'"
            },
            "success": "'pickup'",
            "failure": "$failure"
        },
        "pickup": {
            "task": "Pickup",
            "description": "Fetch input files from client",
            "pre": {
                "outputFileBaseName": "$baseName($firstTrue(outputFileBaseName, sourceMeshFile))"
            },
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(pickupPath, $currentDir)",
                "files": {
                    "highPolyMeshFile": "sourceMeshFile",
                    "inputMTLFile": "sourceMTLFile",
                    "highPolyDiffuseMapFile": "sourceDiffuseMapFile",
                    "documentFile": "svxFile"
                }
            },
            "success": "'reorient-master'",
            "failure": "$failure"
        },
        "reorient-master": {
            "task": "ReorientMesh",
            "description": "Reorient Master mesh to match Voyager orientation and optionally scale to meters",
            "pre": {
                "reorientedMeshFileMaster": "$firstTrue(sourceMeshFile, outputFileBaseName & '-master-geometry.obj')"
            },
            "parameters": {
                "inputMeshFile": "sourceMeshFile",
                "inputVoyagerFile": "svxFile",
                "outputMeshFile": "reorientedMeshFileMaster",
                "scaleToMeters": "scaleToMeters"
            },
            "success": "'sync-mtl-master'",
            "failure": "$failure"
        },
        "sync-mtl-master": {
            "task": "SyncObjMtl",
            "description": "Sync mtl references for master asset",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "mtlFile_master": "$firstTrue(sourceMTLFile, outputFileBaseName & '-master.mtl')"
            },
            "parameters": {
                "objFile": "reorientedMeshFileMaster",
                "mtlFile": "mtlFile_master",
                "textureFile": "sourceDiffuseMapFile"
            },
            "success": "decimationTool = 'RapidCompact' ? 'decimate-rapid-low' : 'decimate-meshlab-low'",
            "failure": "$failure"
        },
        "decimate-rapid-low": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-decimated-rapid-' & $k(numFacesLow) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedLowTargetFile, reorientedMeshFileMaster)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesLow",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom-low'",
            "failure": "'decimate-meshlab-low'"
        },
        "decimate-meshlab-low": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-decimated-meshlab-' & $k(numFacesLow) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedLowTargetFile, reorientedMeshFileMaster)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesLow",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": true
            },
            "success": "'unwrap-rizom-low'",
            "failure": "$failure"
        },
        "unwrap-rizom-low": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "unwrappedMeshFbxFile": "outputFileBaseName & '-' & $k(numFacesLow) & '.fbx'",
                "scene_unwrappedMeshLow": "outputFileBaseName & '-' & $k(numFacesLow) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "scene_unwrappedMeshLow",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSizeLow",
                "segmentationStrength": "unwrapSegmentationStrengthLowAR",
                "packEffort": "packEffort"
            },
            "success": "'inspect-unwrapped-low'",
            "failure": "$failure"
        },
        "inspect-unwrapped-low": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake",
            "skip": "$not(generateLowAssets)",
            "parameters": {
                "meshFile": "scene_unwrappedMeshLow",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake-low'",
            "failure": "$failure"
        },
        "bake-low": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "mapBaseName": "baseMeshMapNameLow & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeLow",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": true,
                "bakeNormals": true,
                "bakeVertexColor": "bakeVertexColor",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 1200
            },
            "post": {
                "diffuseMapUncompressedLow": "bakeDiffuse ? (baseMeshMapNameLow & '-diffuse.png') : ''",
                "vcolMapUncompressedLow": "bakeVertexColor ? (baseMeshNameLow & '_vcols.png') : ''",
                "occlusionMapUncompressedLow": "(baseMeshMapNameLow & '-occlusion.png')",
                "normalMapUncompressedLow": "(baseMeshMapNameLow & '-normals.png')",
                "testMapLow": "bakeTest ? (baseMeshMapNameLow & '-test.png') : ''"
            },
            "success": "'bake-rough-metal-low'",
            "failure": "$failure"
        },
        "bake-rough-metal-low": {
            "task": "BakeMaps",
            "description": "Bake roughness/metalness maps using xNormal",
            "skip": "$not(generateLowAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "mapBaseName": "baseMeshMapNameLow & '-roughmetal.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceRoughMetalMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeLow",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": false,
                "bakeNormals": false,
                "bakeVertexColor": false,
                "bakeTest": false,
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 1200
            },
            "post": {
                "roughMetalMapUncompressedLow": "baseMeshMapNameLow & '-roughmetal-diffuse.png'"
            },
            "success": "'convert-diffuse-map-low'",
            "failure": "$failure"
        },
        "convert-diffuse-map-low": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "($not(bakeDiffuse)  and $not(bakeVertexColor)) or $not(generateLowAssets)",
            "pre": {
                "scene_diffuseMapHigh": "$not(saveAlpha) ? baseMeshMapNameLow & '-diffuse.jpg': baseMeshMapNameLow & '-diffuse.png'"
            },
            "parameters": {
                "inputImageFile": "bakeVertexColor ? vcolMapUncompressedLow : diffuseMapUncompressedLow",
                "outputImageFile": "scene_diffuseMapHigh",
                "quality": "diffuseMapQualityLowAR"
            },
            "success": "'convert-occlusion-map-low'",
            "failure": "$failure"
        },
        "convert-occlusion-map-low": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map Low",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "scene_occlusionMapHigh": "baseMeshMapNameLow & '-occlusion.jpg'"
            },
            "parameters": {
                "inputImageFile": "occlusionMapUncompressedLow",
                "outputImageFile": "scene_occlusionMapHigh",
                "quality": "occlusionMapQualityLowAR"
            },
            "success": "'convert-normal-map-low'",
            "failure": "$failure"
        },
        "convert-normal-map-low": {
            "task": "ConvertImage",
            "description": "Convert Normal Map Low",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "scene_normalMapHigh": "baseMeshMapNameLow & '-normals.jpg'"
            },
            "parameters": {
                "inputImageFile": "normalMapUncompressedLow",
                "outputImageFile": "scene_normalMapHigh",
                "quality": "normalMapQualityLowAR"
            },
            "success": "'convert-roughmetal-map-low'",
            "failure": "$failure"
        },
        "convert-roughmetal-map-low": {
            "task": "ConvertImage",
            "description": "Convert Roughness/Metalness Map Low",
            "skip": "$not(generateLowAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "scene_roughMetalMapLow": "baseMeshMapNameLow & '-roughmetal.jpg'"
            },
            "parameters": {
                "inputImageFile": "roughMetalMapUncompressedLow",
                "outputImageFile": "scene_roughMetalMapLow",
                "quality": "diffuseMapQualityLowAR"
            },
            "success": "'web-asset-glb-low'",
            "failure": "$failure"
        },
        "web-asset-glb-low": {
            "task": "WebAsset",
            "description": "Create binary, uncompressed, embedded glTF asset (low)",
            "skip": "$not(generateGlb) or $not(generateLowAssets)",
            "pre": {
                "deliverables": {
                    "webAssetGlbLowUncompressed": "scaleToMeters ? baseMeshMapNameLow & '_std.glb' : baseMeshMapNameLow & '.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlbLowUncompressed",
                "meshFile": "scene_unwrappedMeshLow",
                "diffuseMapFile": "bakeDiffuse ? scene_diffuseMapHigh : ''",
                "occlusionMapFile": "scene_occlusionMapHigh",
                "normalMapFile": "scene_normalMapHigh",
                "metallicRoughnessMapFile": "sourceRoughMetalMapFile ? scene_roughMetalMapLow : ''",
                "objectSpaceNormals": false,
                "useCompression": false,
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'web-asset-gltf-low'",
            "failure": "$failure"
        },
        "web-asset-gltf-low": {
            "task": "WebAsset",
            "description": "Create glTF asset (low)",
            "skip": "$not(generateGltf) or $not(generateLowAssets)",
            "pre": {
                "scene_webAssetHighGltf": "baseMeshMapNameLow & '.gltf'",
                "scene_webAssetHighBin": "baseMeshMapNameLow & '.bin'"
            },
            "parameters": {
                "outputFile": "scene_webAssetHighGltf",
                "meshFile": "scene_unwrappedMeshLow",
                "diffuseMapFile": "bakeDiffuse ? scene_diffuseMapHigh : ''",
                "occlusionMapFile": "scene_occlusionMapHigh",
                "normalMapFile": "scene_normalMapHigh",
                "metallicRoughnessMapFile": "sourceRoughMetalMapFile ? scene_roughMetalMapLow : ''",
                "objectSpaceNormals": false,
                "useCompression": false,
                "compressionLevel": 10,
                "embedMaps": false,
                "writeBinary": false
            },
            "success": "'sync-mtl-low'",
            "failure": "$failure"
        },
        "sync-mtl-low": {
            "task": "SyncObjMtl",
            "description": "Sync mtl references for Low asset",
            "skip": "$not(generateLowAssets) or ($not(bakeDiffuse)  and $not(bakeVertexColor))",
            "pre": {
                "mtlFile_low": "baseMeshMapNameLow & '.mtl'"
            },
            "parameters": {
                "objFile": "scene_unwrappedMeshLow",
                "mtlFile": "mtlFile_low",
                "textureFile": "scene_diffuseMapHigh"
            },
            "success": "'inspect-mesh'",
            "failure": "$failure"
        },
        "inspect-mesh": {
            "task": "InspectMesh",
            "description": "Inspect mesh health and statistics",
            "skip": "$not(inspectMesh)",
            "pre": {
                "inspectionReport": "inspectMesh ? outputFileBaseName & '-inspection.json' : ''"
            },
            "parameters": {
                "meshFile": "sourceMeshFile",
                "reportFile": "inspectionReport"
            },
            "success": "decimationTool = 'RapidCompact' ? 'decimate-rapid-ar' : 'decimate-meshlab-ar'",
            "failure": "$failure"
        },
        "decimate-rapid-ar": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact",
            "skip": "$not(generateARAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-decimated-rapid-' & $k(numFacesAR) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedARTargetFile, reorientedMeshFileMaster)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesAR",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom-ar'",
            "failure": "'decimate-meshlab-ar'"
        },
        "decimate-meshlab-ar": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab",
            "skip": "$not(generateARAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-decimated-meshlab-' & $k(numFacesAR) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedARTargetFile, reorientedMeshFileMaster)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesLow",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": true
            },
            "success": "'unwrap-rizom-ar'",
            "failure": "$failure"
        },
        "unwrap-rizom-ar": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV",
            "skip": "$not(generateARAssets)",
            "pre": {
                "unwrappedMeshFbxFile": "outputFileBaseName & '-' & $k(numFacesAR) & '.fbx'",
                "scene_unwrappedMesh": "outputFileBaseName & '-' & $k(numFacesAR) & '.obj'"
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "scene_unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSizeAR",
                "segmentationStrength": "unwrapSegmentationStrengthLowAR",
                "packEffort": "packEffort"
            },
            "success": "'inspect-unwrapped-ar'",
            "failure": "$failure"
        },
        "inspect-unwrapped-ar": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake",
            "skip": "$not(generateARAssets)",
            "parameters": {
                "meshFile": "scene_unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake-ar'",
            "failure": "$failure"
        },
        "bake-ar": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal",
            "skip": "$not(generateARAssets)",
            "pre": {
                "mapBaseName": "baseMeshMapNameAR & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeAR",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": true,
                "bakeNormals": true,
                "bakeVertexColor": "bakeVertexColor",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 1200
            },
            "post": {
                "diffuseMapUncompressedAR": "bakeDiffuse ? (baseMeshMapNameAR & '-diffuse.png') : ''",
                "vcolMapUncompressedAR": "bakeVertexColor ? (baseMeshMapNameAR & '_vcols.png') : ''",
                "occlusionMapUncompressedAR": "(baseMeshMapNameAR & '-occlusion.png')",
                "normalMapUncompressedAR": "(baseMeshMapNameAR & '-normals.png')",
                "testMapAR": "bakeTest ? (baseMeshMapNameAR & '-test.png') : ''"
            },
            "success": "'bake-roughmetal-ar'",
            "failure": "$failure"
        },
        "bake-roughmetal-ar": {
            "task": "BakeMaps",
            "description": "Bake roughness/metalness map using xNormal",
            "skip": "$not(generateARAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "mapBaseName": "baseMeshMapNameAR & '-roughmetal.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceRoughMetalMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeAR",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": false,
                "bakeNormals": false,
                "bakeVertexColor": false,
                "bakeTest": false,
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 1200
            },
            "post": {
                "roughMetalMapUncompressedAR": "baseMeshMapNameAR & '-roughmetal-diffuse.png'"
            },
            "success": "'convert-diffuse-map-ar'",
            "failure": "$failure"
        },
        "convert-diffuse-map-ar": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "($not(bakeDiffuse)  and $not(bakeVertexColor)) or $not(generateARAssets)",
            "pre": {
                "scene_diffuseMapAR": "$not(saveAlpha) ? baseMeshMapNameAR & '-diffuse.jpg' : baseMeshMapNameAR & '-diffuse.png'"
            },
            "parameters": {
                "inputImageFile": "bakeVertexColor ? vcolMapUncompressedAR : diffuseMapUncompressedAR",
                "outputImageFile": "scene_diffuseMapAR",
                "quality": "diffuseMapQualityLowAR"
            },
            "success": "'convert-occlusion-map-ar'",
            "failure": "$failure"
        },
        "convert-occlusion-map-ar": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map AR",
            "skip": "$not(generateARAssets)",
            "pre": {
                "scene_occlusionMapAR": "baseMeshMapNameAR & '-occlusion.jpg'"
            },
            "parameters": {
                "inputImageFile": "occlusionMapUncompressedAR",
                "outputImageFile": "scene_occlusionMapAR",
                "quality": "occlusionMapQualityLowAR"
            },
            "success": "'convert-normal-map-ar'",
            "failure": "$failure"
        },
        "convert-normal-map-ar": {
            "task": "ConvertImage",
            "description": "Convert Normal Map AR",
            "skip": "$not(generateARAssets)",
            "pre": {
                "scene_normalMapAR": "baseMeshMapNameAR & '-normals.jpg'"
            },
            "parameters": {
                "inputImageFile": "normalMapUncompressedAR",
                "outputImageFile": "scene_normalMapAR",
                "quality": "normalMapQualityLowAR"
            },
            "success": "'convert-roughmetal-map-ar'",
            "failure": "$failure"
        },
        "convert-roughmetal-map-ar": {
            "task": "ConvertImage",
            "description": "Convert Roughness/Metalness Map AR",
            "skip": "$not(generateARAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "scene_roughMetalMapAR": "baseMeshMapNameAR & '-roughmetal.jpg'"
            },
            "parameters": {
                "inputImageFile": "roughMetalMapUncompressedAR",
                "outputImageFile": "scene_roughMetalMapAR",
                "quality": "diffuseMapQualityLowAR"
            },
            "success": "'sync-mtl-ar'",
            "failure": "$failure"
        },
        "sync-mtl-ar": {
            "task": "SyncObjMtl",
            "description": "Sync mtl references for AR asset",
            "skip": "$not(generateARAssets) or ($not(bakeDiffuse)  and $not(bakeVertexColor))",
            "pre": {
                "mtlFile_ar": "baseMeshMapNameAR & '.mtl'"
            },
            "parameters": {
                "objFile": "scene_unwrappedMesh",
                "mtlFile": "mtlFile_ar",
                "textureFile": "scene_diffuseMapAR"
            },
            "success": "'web-asset-glb-draco-ar'",
            "failure": "$failure"
        },
        "web-asset-glb-draco-ar": {
            "task": "WebAsset",
            "description": "Create binary, compressed, embedded glTF asset (AR)",
            "skip": "$not(generateGlb) or $not(generateARAssets)",
            "pre": {
                "deliverables": {
                    "webAssetGlbARCompressed": "scaleToMeters ? baseMeshMapNameAR & '_std_draco.glb' : baseMeshMapNameAR & '_draco.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlbARCompressed",
                "meshFile": "scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? scene_diffuseMapAR : ''",
                "occlusionMapFile": "scene_occlusionMapAR",
                "normalMapFile": "scene_normalMapAR",
                "metallicRoughnessMapFile": "sourceRoughMetalMapFile ? scene_roughMetalMapAR : ''",
                "objectSpaceNormals": false,
                "useCompression": true,
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'update-document-ar'",
            "failure": "$failure"
        },
        "update-document-ar": {
            "task": "Document",
            "description": "Add AR model to document.json descriptor file (App3D)",
            "skip": "$not(generateGlb) or $not(generateARAssets)",
            "pre": {
                "deliverables": {
                    "scene_document": "$firstTrue(svxFile, 'scene.svx.json')"
                }
            },
            "parameters": {
                "documentFile": "deliverables.scene_document",
                "derivativeQuality": "'AR'",
                "derivativeUsage": "'App3D'",
                "modelIndex": 0,
                "modelFile": "deliverables.webAssetGlbARCompressed",
                "numFaces": "numFacesAR",
                "mapSize": "mapSizeAR"
            },
            "success": "'usdz-asset'",
            "failure": "$failure"
        },
        "usdz-asset": {
            "task": "GenerateUsdz",
            "description": "Create usdz for AR asset",
            "skip": "$not(generateARAssets) or $not(generateUsdz)",
            "pre": {
                "deliverables": {
                    "usdz": "scaleToMeters ? baseMeshMapNameAR & '_std.usdz' : baseMeshMapNameAR & '.usdz'"
                }
            },
            "parameters": {
                "sourceFile": "scene_unwrappedMesh",
                "outputFile": "deliverables.usdz"
            },
            "success": "'update-document-usdz'",
            "failure": "$failure"
        },
        "update-document-usdz": {
            "task": "Document",
            "description": "Add AR (usdz) model to document.json descriptor file (iOSApp3D)",
            "skip": "$not(generateARAssets) or $not(generateUsdz)",
            "pre": {
                "deliverables": {
                    "scene_document": "$firstTrue(svxFile, 'scene.svx.json')"
                }
            },
            "parameters": {
                "documentFile": "deliverables.scene_document",
                "derivativeQuality": "'AR'",
                "derivativeUsage": "'iOSApp3D'",
                "modelIndex": 0,
                "modelFile": "deliverables.usdz",
                "numFaces": "numFacesAR",
                "mapSize": "mapSizeAR"
            },
            "success": "'remesh-medium'",
            "failure": "$failure"
        },
        "remesh-medium": {
            "task": "Remesh",
            "description": "Generate a new quad-based mesh of the master for Medium obj",
            "skip": "remeshFaces < 1",
            "pre": {
                "remeshedMeshFile": "$baseMeshName(outputFileBaseName, remeshFaces) & '-1000k-remeshed.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedMedTargetFile, sourceMeshFile)",
                "outputMeshFile": "remeshedMeshFile",
                "numFaces": "numFacesMedium"
            },
            "post": {
                "preDecimatedUnwrappedMedTargetFile": "remeshedMeshFile"
            },
            "success": "decimationTool = 'RapidCompact' ? 'decimate-rapid-medium' : 'decimate-meshlab-medium'",
            "failure": "$failure"
        },
        "decimate-rapid-medium": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-1000k-decimated-rapid.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedMedTargetFile, sourceMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesMedium",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom-medium'",
            "failure": "'decimate-meshlab-medium'"
        },
        "decimate-meshlab-medium": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "decimatedMeshFile": "outputFileBaseName & '-1000k-decimated-meshlab.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(preDecimatedUnwrappedMedTargetFile, sourceMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFacesMedium",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": true
            },
            "success": "'unwrap-rizom-medium'",
            "failure": "$failure"
        },
        "unwrap-rizom-medium": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "unwrappedMeshFbxFile": "outputFileBaseName & '-1000k.fbx'",
                "unwrappedMesh": "outputFileBaseName & '-1000k.obj'"
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSizeMedium",
                "segmentationStrength": "unwrapSegmentationStrengthMedium",
                "packEffort": "packEffort",
                "timeout": 1800
            },
            "success": "'inspect-unwrapped-medium'",
            "failure": "$failure"
        },
        "inspect-unwrapped-medium": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "parameters": {
                "meshFile": "unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake-medium'",
            "failure": "$failure"
        },
        "bake-medium": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "mapBaseName": "baseMeshMapNameMedium & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeMedium",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": true,
                "bakeNormals": true,
                "bakeVertexColor": "bakeVertexColor",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 3600
            },
            "post": {
                "diffuseMapUncompressed": "bakeDiffuse ? (baseMeshMapNameMedium & '-diffuse.png') : ''",
                "vcolMapUncompressed": "bakeVertexColor ? (baseMeshMapNameMedium & '_vcols.png') : ''",
                "occlusionMapUncompressed": "(baseMeshMapNameMedium & '-occlusion.png')",
                "normalMapUncompressed": "(baseMeshMapNameMedium & '-normals.png')",
                "testMap": "bakeTest ? (baseMeshMapNameMedium & '-test.png') : ''"
            },
            "success": "'bake-roughmetal-medium'",
            "failure": "$failure"
        },
        "bake-roughmetal-medium": {
            "task": "BakeMaps",
            "description": "Bake roughness/metalness map using xNormal",
            "skip": "$not(generateMediumAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "mapBaseName": "baseMeshMapNameMedium & '-roughmetal.png'"
            },
            "parameters": {
                "highPolyMeshFile": "reorientedMeshFileMaster",
                "highPolyDiffuseMapFile": "sourceRoughMetalMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSizeMedium",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": false,
                "bakeNormals": false,
                "bakeVertexColor": false,
                "bakeTest": false,
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": true,
                "timeout": 3600
            },
            "post": {
                "roughMetalMapUncompressed": "baseMeshMapNameMedium & '-roughmetal-diffuse.png'"
            },
            "success": "'convert-diffuse-map-medium'",
            "failure": "$failure"
        },
        "convert-diffuse-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map for Medium obj",
            "skip": "($not(bakeDiffuse)  and $not(bakeVertexColor)) or $not(generateMediumAssets)",
            "pre": {
                "diffuseMap": "$not(saveAlpha) ? baseMeshMapNameMedium & '-diffuse.jpg' : baseMeshMapNameMedium & '-diffuse.png'"
            },
            "parameters": {
                "inputImageFile": "bakeVertexColor ? vcolMapUncompressed : diffuseMapUncompressed",
                "outputImageFile": "diffuseMap",
                "quality": "diffuseMapQualityMedium"
            },
            "success": "'convert-occlusion-map-medium'",
            "failure": "$failure"
        },
        "convert-occlusion-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                    "occlusionMap": "baseMeshMapNameMedium & '-occlusion.jpg'"
            },
            "parameters": {
                "inputImageFile": "occlusionMapUncompressed",
                "outputImageFile": "occlusionMap",
                "quality": "occlusionMapQualityMedium"
            },
            "success": "'convert-normal-map-medium'",
            "failure": "$failure"
        },
        "convert-normal-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Normal Map for Medium obj",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "normalMap": "baseMeshMapNameMedium & '-normals.jpg'"
            },
            "parameters": {
                "inputImageFile": "normalMapUncompressed",
                "outputImageFile": "normalMap",
                "quality": "normalMapQualityMedium"
            },
            "success": "'convert-roughmetal-map-medium'",
            "failure": "$failure"
        },
        "convert-roughmetal-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Roughness/Metalness Map for Medium obj",
            "skip": "$not(generateMediumAssets) or $not($exists(sourceRoughMetalMapFile))",
            "pre": {
                "roughMetalMap": "baseMeshMapNameMedium & '-roughmetal.jpg'"
            },
            "parameters": {
                "inputImageFile": "roughMetalMapUncompressed",
                "outputImageFile": "roughMetalMap",
                "quality": "normalMapQualityMedium"
            },
            "success": "'web-asset-glb-medium'",
            "failure": "$failure"
        },
        "web-asset-glb-medium": {
            "task": "WebAsset",
            "description": "Create binary, uncompressed, embedded glTF Medium asset",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "deliverables": {
                    "webAssetGlbMed": "scaleToMeters ? baseMeshMapNameMedium & '_std.glb' : baseMeshMapNameMedium & '.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlbMed",
                "meshFile": "unwrappedMesh",
                "diffuseMapFile": "diffuseMap",
                "occlusionMapFile": "occlusionMap",
                "normalMapFile": "normalMap",
                "metallicRoughnessMapFile": "sourceRoughMetalMapFile ? roughMetalMap : ''",
                "objectSpaceNormals": false,
                "zoneMapFile": "zoneMapFile",
                "alignCenter": false,
                "alignFloor": false,
                "useCompression": false,
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'web-asset-gltf-medium'",
            "failure": "$failure"

        },
        "web-asset-gltf-medium": {
            "task": "WebAsset",
            "description": "Create glTF Medium asset",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "webAssetGltf": "baseMeshMapNameMedium & '.gltf'",
                "webAssetBin": "baseMeshMapNameMedium & '.bin'"
            },
            "parameters": {
                "outputFile": "webAssetGltf",
                "meshFile": "unwrappedMesh",
                "diffuseMapFile": "diffuseMap",
                "occlusionMapFile": "occlusionMap",
                "normalMapFile": "normalMap",
                "metallicRoughnessMapFile": "sourceRoughMetalMapFile ? roughMetalMap : ''",
                "objectSpaceNormals": false,
                "zoneMapFile": "zoneMapFile",
                "alignCenter": false,
                "alignFloor": false,
                "useCompression": false,
                "compressionLevel": 10,
                "embedMaps": false,
                "writeBinary": false
            },
            "success": "'sync-mtl-medium'",
            "failure": "$failure"
        },
        "sync-mtl-medium": {
            "task": "SyncObjMtl",
            "description": "Sync mtl references for Medium asset",
            "skip": "$not(generateMediumAssets)  or ($not(bakeDiffuse)  and $not(bakeVertexColor))",
            "pre": {
                "mtlFile_medium": "baseMeshMapNameMedium & '.mtl'"
            },
            "parameters": {
                "objFile": "unwrappedMesh",
                "mtlFile": "mtlFile_medium",
                "textureFile": "diffuseMap"
            },
            "success": "'zip-master'",
            "failure": "$failure"
        },
        "zip-master": {
            "task": "Zip",
            "description": "Zip up master assets",
            "pre": {
                "deliverables": {
                    "objZipFull": "scaleToMeters ? outputFileBaseName & '-full_resolution-obj_std.zip' : outputFileBaseName & '-full_resolution-obj.zip'"
                }
            },
            "parameters": {
                "inputFile1": "reorientedMeshFileMaster",
                "inputFile2": "sourceDiffuseMapFile",
                "inputFile3": "mtlFile_master",
                "inputFile4": "sourceRoughMetalMapFile",
                "outputFile": "deliverables.objZipFull",
                "operation": "'zip'"
            },
            "success": "'zip-low-gltf'",
            "failure": "$failure"
        },
        "zip-low-gltf": {
            "task": "Zip",
            "description": "Zip up Low gltf assets",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "deliverables": {
                    "gltfZipLow": "scaleToMeters ? baseMeshMapNameLow & '-gltf_std.zip' : baseMeshMapNameLow & '-gltf.zip'"
                }
            },
            "parameters": {
                "inputFile1": "scene_webAssetHighGltf",
                "inputFile2": "scene_webAssetHighBin",
                "inputFile3": "scene_diffuseMapHigh",
                "inputFile4": "scene_occlusionMapHigh",
                "inputFile5": "scene_normalMapHigh",
                "inputFile6": "scene_roughMetalMapLow",
                "outputFile": "deliverables.gltfZipLow",
                "operation": "'zip'"
            },
            "success": "'zip-low-obj'",
            "failure": "$failure"
        },
        "zip-low-obj": {
            "task": "Zip",
            "description": "Zip up Low obj assets",
            "skip": "$not(generateLowAssets)",
            "pre": {
                "deliverables": {
                    "objZipLow": "scaleToMeters ? baseMeshMapNameLow & '-obj_std.zip' : baseMeshMapNameLow & '-obj.zip'"
                }
            },
            "parameters": {
                "inputFile1": "scene_unwrappedMeshLow",
                "inputFile2": "mtlFile_low",
                "inputFile3": "scene_diffuseMapHigh",
                "inputFile4": "scene_occlusionMapHigh",
                "inputFile5": "scene_normalMapHigh",
                "inputFile6": "scene_roughMetalMapLow",
                "outputFile": "deliverables.objZipLow",
                "operation": "'zip'"
            },
            "success": "'zip-medium-gltf'",
            "failure": "$failure"
        },
        "zip-medium-gltf": {
            "task": "Zip",
            "description": "Zip up Medium gltf assets",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "deliverables": {
                    "gltfZipMed": "scaleToMeters ? baseMeshMapNameMedium & '-gltf_std.zip' : baseMeshMapNameMedium & '-gltf.zip'"
                }
            },
            "parameters": {
                "inputFile1": "webAssetGltf",
                "inputFile2": "webAssetBin",
                "inputFile3": "diffuseMap",
                "inputFile4": "occlusionMap",
                "inputFile5": "normalMap",
                "inputFile6": "roughMetalMap",
                "outputFile": "deliverables.gltfZipMed",
                "operation": "'zip'"
            },
            "success": "'zip-medium-obj'",
            "failure": "$failure"
        },
        "zip-medium-obj": {
            "task": "Zip",
            "description": "Zip up medium obj assets",
            "skip": "$not(generateMediumAssets)",
            "pre": {
                "deliverables": {
                    "objZipMed": "scaleToMeters ? baseMeshMapNameMedium & '-obj_std.zip' : baseMeshMapNameMedium & '-obj.zip'"
                }
            },
            "parameters": {
                "inputFile1": "unwrappedMesh",
                "inputFile2": "mtlFile_medium",
                "inputFile3": "diffuseMap",
                "inputFile4": "occlusionMap",
                "inputFile5": "normalMap",
                "inputFile6": "roughMetalMap",
                "outputFile": "deliverables.objZipMed",
                "operation": "'zip'"
            },
            "success": "'delivery'",
            "failure": "$failure"
        },
        "delivery": {
            "task": "Delivery",
            "description": "Send result files back to client",
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(deliveryPath, pickupPath, $currentDir)",
                "files": "deliverables"
            },
            "success": "$success",
            "failure": "$failure"
        }
    }
}
