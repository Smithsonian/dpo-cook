{
    "id": "5490a618-4ebd-4763-a96a-abb9062c786b",
    "name": "si-voyager-asset",
    "description": "Generate Voyager package from single unmodified asset",
    "version": "5",
    "start": "pickup",

    "parameterSchema": {
        "type": "object",
        "properties": {
            "sourceMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceDiffuseMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceOcclusionMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceEmissiveMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceMetallicRoughnessMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceNormalMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "sourceZoneMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "tool": {
                "type": "string",
                "enum": [
                    "MeshSmith",
                    "Blender"
                ],
                "default": "MeshSmith"
            },
            "svxFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "metaDataFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "outputFileBaseName": {
                "type": "string",
                "minLength": 1
            },
            "blendAlpha": {
                "type": "boolean",
                "default": false
            },
            "modelIndex": {
                "type": "integer",
                "minimum": 0,
                "default": 0
            },
            "assetQuality": {
                "type": "string",
                "minLength": 1,
                "default": "Thumb"
            },
            "units": {
                "type": "string",
                "enum": [ "mm", "cm", "m", "in", "ft", "yd" ],
                "default": "cm"
            },
            "alignCenter": {
                "type": "boolean",
                "default": false
            },
            "alignFloor": {
                "type": "boolean",
                "default": false
            },
            "tangentSpaceNormals": {
                "type": "boolean",
                "default": true
            },
            "generateGlb": {
                "type": "boolean",
                "default": true
            },
            "generateGltf": {
                "type": "boolean",
                "default": true
            },
            "useCompression": {
                "type": "boolean",
                "default": true
            }
        },
        "required": [
            "sourceMeshFile"
        ],
        "additionalProperties": false
    },

    "steps": {
        "pickup": {
            "task": "Pickup",
            "description": "Fetch input files from client",
            "pre": {
                "outputFileBaseName": "$baseName($firstTrue(outputFileBaseName, sourceMeshFile))"
            },
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(pickupPath, $currentDir)",
                "files": {
                    "meshFile": "sourceMeshFile",
                    "diffuseMapFile": "sourceDiffuseMapFile",
                    "occlusionMapFile": "sourceOcclusionMapFile",
                    "emissiveMapFile": "sourceEmissiveMapFile",
                    "metallicRoughnessMapFile": "sourceMetallicRoughnessMapFile",
                    "normalMapFile": "sourceNormalMapFile",
                    "zoneMapFile": "sourceZoneMapFile",
                    "documentFile": "svxFile",
                    "metaDataFile": "metaDataFile"
                }
            },
            "success": "'web-asset-glb'",
            "failure": "$failure"
        },
        "web-asset-glb": {
            "task": "WebAsset",
            "description": "Create binary, compressed, embedded glTF asset",
            "skip": "$not(generateGlb)",
            "pre": {
                "deliverables": {
                    "webAssetGlb": "outputFileBaseName & '-web.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlb",
                "meshFile": "sourceMeshFile",
                "diffuseMapFile": "sourceDiffuseMapFile",
                "occlusionMapFile": "sourceOcclusionMapFile",
                "emissiveMapFile": "sourceEmissiveMapFile",
                "metallicRoughnessMapFile": "sourceMetallicRoughnessMapFile",
                "normalMapFile": "sourceNormalMapFile",
                "zoneMapFile": "sourceZoneMapFile",
                "alignCenter": "alignCenter",
                "alignFloor": "alignFloor",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression",
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true,
                "alphaBlend": "blendAlpha",
                "tool": "tool"
            },
            "success": "'web-asset-gltf'",
            "failure": "$failure"

        },
        "web-asset-gltf": {
            "task": "WebAsset",
            "description": "Create glTF asset",
            "skip": "$not(generateGltf)",
            "pre": {
                "deliverables": {
                    "webAssetGltf": "outputFileBaseName & '-web.gltf'",
                    "webAssetBin": "outputFileBaseName & '-web.bin'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGltf",
                "meshFile": "sourceMeshFile",
                "diffuseMapFile": "sourceDiffuseMapFile",
                "occlusionMapFile": "sourceOcclusionMapFile",
                "emissiveMapFile": "sourceEmissiveMapFile",
                "metallicRoughnessMapFile": "sourceMetallicRoughnessMapFile",
                "normalMapFile": "sourceNormalMapFile",
                "zoneMapFile": "sourceZoneMapFile",
                "alignCenter": "alignCenter",
                "alignFloor": "alignFloor",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": false,
                "compressionLevel": 10,
                "embedMaps": false,
                "writeBinary": false,
                "alphaBlend": "blendAlpha",
                "tool": "tool"
            },
            "success": "'update-document'",
            "failure": "$failure"
        },
        "update-document": {
            "task": "Document",
            "description": "Add web model to document.json descriptor file",
            "pre": {
                "deliverables": {
                    "document": "$firstTrue(svxFile, 'scene.svx.json')"
                }
            },
            "parameters": {
                "documentFile": "deliverables.document",
                "metaDataFile": "metaDataFile",
                "modelIndex": "modelIndex",
                "modelName": "outputFileBaseName",
                "units": "units",
                "derivativeQuality": "assetQuality",
                "modelFile": "$firstTrue(deliverables.webAssetGlb, deliverables.webAssetGltf)",
                "numFaces": "numFaces",
                "mapSize": "mapSize"
            },
            "success": "'delivery'",
            "failure": "$failure"
        },
        "delivery": {
            "task": "Delivery",
            "description": "Send result files back to client",
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(deliveryPath, pickupPath, $currentDir)",
                "files": "deliverables"
            },
            "success": "$success",
            "failure": "$failure"
        }
    }
}