{
    "id": "721d459c-af09-4525-a28b-e71a89439282",
    "name": "web-multi",
    "description": "Generates multi-level (150k faces, 1k, 2k, 4k maps) glTF/GLB web assets",
    "version": "13",
    "start": "log",

    "parameterSchema": {
        "type": "object",
        "properties": {
            "highPolyMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "highPolyDiffuseMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "processedMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "documentFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "metaDataFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "baseName": {
                "type": "string",
                "minLength": 1
            },
            "numFaces": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 150000
            },
            "mapSize": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 4096
            },
            "modelIndex": {
                "type": "integer",
                "minimum": 0,
                "default": 0
            },
            "units": {
                "type": "string",
                "enum": [ "mm", "cm", "m", "in", "ft", "yd" ],
                "default": "cm"
            },
            "inspectMesh": {
                "type": "boolean",
                "default": false
            },
            "remeshFaces": {
                "type": "integer",
                "default": 0
            },
            "cleanupMesh": {
                "type": "boolean",
                "default": false
            },
            "decimationTool": {
                "type": "string",
                "enum": [ "Meshlab", "RapidCompact" ],
                "default": "RapidCompact"
            },
            "segmentationStrength": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "packEffort": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "bakeOcclusion": {
                "type": "boolean",
                "default": true
            },
            "bakeNormals": {
                "type": "boolean",
                "default": true
            },
            "bakeTest": {
                "type": "boolean",
                "default": true
            },
            "maxRayDistance": {
                "type": "number",
                "default": 0
            },
            "occlusionRays": {
                "type": "integer",
                "minimum": 1,
                "maximum": 512,
                "default": 128
            },
            "diffuseMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 79
            },
            "occlusionMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 59
            },
            "normalMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 89
            },
            "tangentSpaceNormals": {
                "type": "boolean",
                "default": true
            },
            "packContainer": {
                "type": "boolean",
                "default": true
            },
            "useCompression": {
                "type": "boolean",
                "default": true
            }
        },
        "required": [
            "highPolyMeshFile"
        ],
        "additionalProperties": false
    },

    "steps": {
        "log": {
            "task": "Log",
            "description": "Enable logging services",
            "pre": {
                "baseName": "$baseName($firstTrue(baseName, highPolyMeshFile))",
                "baseMeshName": "$baseMeshName($firstTrue(baseName, highPolyMeshFile), numFaces)",
                "baseMeshMapName": "$baseMeshMapName($firstTrue(baseName, highPolyMeshFile), numFaces, mapSize)",
                "baseMeshMapNameHigh": "$baseMeshMapName(baseName, numFaces, mapSize)",
                "baseMeshMapNameMedium": "$baseMeshMapName(baseName, numFaces, mapSize * 0.5)",
                "baseMeshMapNameLow": "$baseMeshMapName(baseName, numFaces, mapSize * 0.25)",
                "mapSizeHigh": "mapSize",
                "mapSizeMedium": "mapSize * 0.5",
                "mapSizeLow": "mapSize * 0.25",
                "bakeDiffuse": "$exists(highPolyDiffuseMapFile)"
            },
            "parameters": {
                "logToConsole": true,
                "reportFile": "baseMeshName & '-web-multi-report.json'"
            },
            "success": "'inspect-mesh'",
            "failure": "$failure"
        },
        "inspect-mesh": {
            "task": "InspectMesh",
            "description": "Inspect mesh health and statistics",
            "skip": "$not(inspectMesh)",
            "pre": {
                "deliverables": {
                    "inspectionReport": "inspectMesh ? baseName & '-inspection.json' : ''"
                }
            },
            "parameters": {
                "meshFile": "highPolyMeshFile",
                "reportFile": "deliverables.inspectionReport"
            },
            "success": "'remesh'",
            "failure": "$failure"
        },
        "remesh": {
            "task": "Remesh",
            "description": "Generate a new quad-based mesh",
            "skip": "remeshFaces < 1",
            "pre": {
                "deliverables": {
                    "remeshedMeshFile": "$baseMeshName(baseName, remeshFaces) & '-remeshed.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "deliverables.remeshedMeshFile",
                "numFaces": "remeshFaces"
            },
            "post": {
                "processedMeshFile": "deliverables.remeshedMeshFile"
            },
            "success": "decimationTool = 'RapidCompact' ? 'decimate-rapid' : 'decimate-meshlab'",
            "failure": "$failure"
        },
        "decimate-rapid": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact",
            "pre": {
                "decimatedMeshFile": "baseMeshName & '-decimated-rapid.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom'",
            "failure": "'decimate-meshlab'"
        },
        "decimate-meshlab": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab",
            "pre": {
                "decimatedMeshFile": "baseMeshName & '-decimated-meshlab.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": "tangentSpaceNormals"
            },
            "success": "'unwrap-rizom'",
            "failure": "$failure"
        },
        "unwrap-rizom": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV",
            "pre": {
                "unwrappedMeshFbxFile": "baseMeshName & '-unwrapped.fbx'",
                "deliverables": {
                    "scene_unwrappedMesh": "baseMeshName & '-unwrapped.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "deliverables.scene_unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSize",
                "segmentationStrength": "segmentationStrength",
                "packEffort": "packEffort"
            },
            "success": "'inspect-unwrapped'",
            "failure": "$failure"
        },
        "inspect-unwrapped": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake",
            "parameters": {
                "meshFile": "deliverables.scene_unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake'",
            "failure": "$failure"
        },
        "bake": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal",
            "pre": {
                "mapBaseName": "baseMeshMapName & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "highPolyMeshFile",
                "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSize",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": "bakeOcclusion",
                "bakeNormals": "bakeNormals",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": "tangentSpaceNormals",
                "timeout": 1200
            },
            "post": {
                "deliverables": {
                    "diffuseMapUncompressed": "bakeDiffuse ? (baseMeshMapName & '-diffuse.png') : ''",
                    "occlusionMapUncompressed": "bakeOcclusion ? (baseMeshMapName & '-occlusion.png') : ''",
                    "normalMapUncompressed": "bakeNormals ? (baseMeshMapName & '-normals.png') : ''",
                    "testMap": "bakeTest ? (baseMeshMapName & '-test.png') : ''"
                }
            },
            "success": "'convert-diffuse-map-high'",
            "failure": "$failure"
        },
        "convert-diffuse-map-high": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "deliverables": {
                    "scene_diffuseMapHigh": "baseMeshMapNameHigh & '-diffuse.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.diffuseMapUncompressed",
                "outputImageFile": "deliverables.scene_diffuseMapHigh",
                "quality": "diffuseMapQuality"
            },
            "success": "'convert-occlusion-map-high'",
            "failure": "$failure"
        },
        "convert-occlusion-map-high": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map High",
            "skip": "$not(bakeOcclusion)",
            "pre": {
                "deliverables": {
                    "scene_occlusionMapHigh": "baseMeshMapNameHigh & '-occlusion.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.occlusionMapUncompressed",
                "outputImageFile": "deliverables.scene_occlusionMapHigh",
                "quality": "occlusionMapQuality"
            },
            "success": "'convert-normal-map-high'",
            "failure": "$failure"
        },
        "convert-normal-map-high": {
            "task": "ConvertImage",
            "description": "Convert Normal Map High",
            "skip": "$not(bakeNormals)",
            "pre": {
                "deliverables": {
                    "scene_normalMapHigh": "baseMeshMapNameHigh & '-normals.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.normalMapUncompressed",
                "outputImageFile": "deliverables.scene_normalMapHigh",
                "quality": "normalMapQuality"
            },
            "success": "'web-asset-high'",
            "failure": "$failure"
        },
        "web-asset-high": {
            "task": "WebAsset",
            "description": "Create glTF web asset (high)",
            "pre": {
                "deliverables": {
                    "scene_webAssetHigh": "baseMeshMapNameHigh & (packContainer ? '-high.glb' : '-high.gltf')",
                    "scene_webAssetHighBin": "packContainer ? '' : (baseMeshMapNameHigh & '-high.bin')"
                }
            },
            "parameters": {
                "outputFile": "deliverables.scene_webAssetHigh",
                "meshFile": "deliverables.scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? deliverables.scene_diffuseMapHigh : ''",
                "occlusionMapFile": "bakeOcclusion ? deliverables.scene_occlusionMapHigh : ''",
                "normalMapFile": "bakeNormals ? deliverables.scene_normalMapHigh : ''",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression",
                "compressionLevel": 10,
                "embedMaps": "packContainer",
                "writeBinary": "packContainer"
            },
            "success": "'update-document-high'",
            "failure": "$failure"
        },
        "update-document-high": {
            "task": "Document",
            "description": "Add web model to document.json descriptor file (high)",
            "pre": {
                "deliverables": {
                    "scene_document": "$firstTrue(documentFile, 'scene.svx.json')"
                }
            },
            "parameters": {
                "documentFile": "deliverables.scene_document",
                "metaDataFile": "metaDataFile",
                "modelIndex": "modelIndex",
                "derivativeQuality": "'High'",
                "modelFile": "deliverables.scene_webAssetHigh",
                "numFaces": "numFaces",
                "mapSize": "mapSizeHigh"
            },
            "success": "'convert-diffuse-map-medium'",
            "failure": "$failure"
        },
        "convert-diffuse-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "deliverables": {
                    "scene_diffuseMapMedium": "baseMeshMapNameMedium & '-diffuse.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.diffuseMapUncompressed",
                "outputImageFile": "deliverables.scene_diffuseMapMedium",
                "quality": "diffuseMapQuality",
                "resize": "mapSizeMedium"
            },
            "success": "'convert-occlusion-map-medium'",
            "failure": "$failure"
        },
        "convert-occlusion-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map Medium",
            "skip": "$not(bakeOcclusion)",
            "pre": {
                "deliverables": {
                    "scene_occlusionMapMedium": "baseMeshMapNameMedium & '-occlusion.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.occlusionMapUncompressed",
                "outputImageFile": "deliverables.scene_occlusionMapMedium",
                "quality": "occlusionMapQuality",
                "resize": "mapSizeMedium"
            },
            "success": "'convert-normal-map-medium'",
            "failure": "$failure"
        },
        "convert-normal-map-medium": {
            "task": "ConvertImage",
            "description": "Convert Normal Map Medium",
            "skip": "$not(bakeNormals)",
            "pre": {
                "deliverables": {
                    "scene_normalMapMedium": "baseMeshMapNameMedium & '-normals.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.normalMapUncompressed",
                "outputImageFile": "deliverables.scene_normalMapMedium",
                "quality": "normalMapQuality",
                "resize": "mapSizeMedium"
            },
            "success": "'web-asset-medium'",
            "failure": "$failure"
        },
        "web-asset-medium": {
            "task": "WebAsset",
            "description": "Create glTF web asset (medium)",
            "pre": {
                "deliverables": {
                    "scene_webAssetMedium": "baseMeshMapNameMedium & (packContainer ? '-medium.glb' : '-medium.gltf')",
                    "scene_webAssetMediumBin": "packContainer ? '' : (baseMeshMapNameMedium & '-medium.bin')"
                }
            },
            "parameters": {
                "outputFile": "deliverables.scene_webAssetMedium",
                "meshFile": "deliverables.scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? deliverables.scene_diffuseMapMedium : ''",
                "occlusionMapFile": "bakeOcclusion ? deliverables.scene_occlusionMapMedium : ''",
                "normalMapFile": "bakeNormals ? deliverables.scene_normalMapMedium : ''",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression",
                "compressionLevel": 10,
                "embedMaps": "packContainer",
                "writeBinary": "packContainer"
            },
            "success": "'update-document-medium'",
            "failure": "$failure"
        },
        "update-document-medium": {
            "task": "Document",
            "description": "Add web model to document.json descriptor file (medium)",
            "parameters": {
                "documentFile": "deliverables.scene_document",
                "modelIndex": "modelIndex",
                "derivativeQuality": "'Medium'",
                "modelFile": "deliverables.scene_webAssetMedium",
                "numFaces": "numFaces",
                "mapSize": "mapSizeMedium"
            },
            "success": "'convert-diffuse-map-low'",
            "failure": "$failure"
        },
        "convert-diffuse-map-low": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "deliverables": {
                    "scene_diffuseMapLow": "baseMeshMapNameLow & '-diffuse.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.diffuseMapUncompressed",
                "outputImageFile": "deliverables.scene_diffuseMapLow",
                "quality": "diffuseMapQuality",
                "resize": "mapSizeLow"
            },
            "success": "'convert-occlusion-map-low'",
            "failure": "$failure"
        },
        "convert-occlusion-map-low": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map Low",
            "skip": "$not(bakeOcclusion)",
            "pre": {
                "deliverables": {
                    "scene_occlusionMapLow": "baseMeshMapNameLow & '-occlusion.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.occlusionMapUncompressed",
                "outputImageFile": "deliverables.scene_occlusionMapLow",
                "quality": "occlusionMapQuality",
                "resize": "mapSizeLow"
            },
            "success": "'convert-normal-map-low'",
            "failure": "$failure"
        },
        "convert-normal-map-low": {
            "task": "ConvertImage",
            "description": "Convert Normal Map Low",
            "skip": "$not(bakeNormals)",
            "pre": {
                "deliverables": {
                    "scene_normalMapLow": "baseMeshMapNameLow & '-normals.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.normalMapUncompressed",
                "outputImageFile": "deliverables.scene_normalMapLow",
                "quality": "normalMapQuality",
                "resize": "mapSizeLow"
            },
            "success": "'web-asset-low'",
            "failure": "$failure"
        },
        "web-asset-low": {
            "task": "WebAsset",
            "description": "Create glTF web asset (low)",
            "pre": {
                "deliverables": {
                    "scene_webAssetLow": "baseMeshMapNameLow & (packContainer ? '-low.glb' : '-low.gltf')",
                    "scene_webAssetLowBin": "packContainer ? '' : (baseMeshMapNameLow & '-low.bin')"
                }
            },
            "parameters": {
                "outputFile": "deliverables.scene_webAssetLow",
                "meshFile": "deliverables.scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? deliverables.scene_diffuseMapLow : ''",
                "occlusionMapFile": "bakeOcclusion ? deliverables.scene_occlusionMapLow : ''",
                "normalMapFile": "bakeNormals ? deliverables.scene_normalMapLow : ''",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression",
                "compressionLevel": 8,
                "embedMaps": "packContainer",
                "writeBinary": "packContainer"
            },
            "success": "'update-document-low'",
            "failure": "$failure"
        },
        "update-document-low": {
            "task": "Document",
            "description": "Add web model to document.json descriptor file (low)",
            "parameters": {
                "documentFile": "deliverables.scene_document",
                "modelIndex": "modelIndex",
                "modelName": "baseName",
                "units": "units",
                "derivativeQuality": "'Low'",
                "modelFile": "deliverables.scene_webAssetLow",
                "numFaces": "numFaces",
                "mapSize": "mapSizeLow"
            },
            "success": "'delivery'",
            "failure": "$failure"
        },

        "delivery": {
            "task": "Delivery",
            "description": "Send result files back to client",
            "parameters": {
                "method": "none",
                "path": "$currentDir",
                "files": "deliverables"
            },
            "success": "$success",
            "failure": "$failure"
        }
    }
}