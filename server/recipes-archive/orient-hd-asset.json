{
    "id": "312211e5-f218-4713-93e9-e30117c83aa0",
    "name": "orient-hd-asset",
    "description": "Orients an .obj to match the supplied .svx and then runs the web-hd and web-asset recipes",
    "version": "1",
    "start": "log",

    "parameterSchema": {
        "type": "object",
        "properties": {
            "highPolyMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "highPolyDiffuseMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "inputMTLFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "documentFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "baseName": {
                "type": "string",
                "minLength": 1
            },
            "outputMeshFile": {
                "type": "string",
                "minLength": 1
            },
            "processedMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "metaDataFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "numFaces150": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 150000
            },
            "numFaces1000": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 1000000
            },
            "mapSize150": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 4096
            },
            "mapSize1000": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 8192
            },
            "modelIndex": {
                "type": "integer",
                "minimum": 0,
                "default": 0
            },
            "units": {
                "type": "string",
                "enum": [ "mm", "cm", "m", "in", "ft", "yd" ],
                "default": "cm"
            },
            "inspectMesh": {
                "type": "boolean",
                "default": false
            },
            "remeshFaces": {
                "type": "integer",
                "default": 0
            },
            "cleanupMesh": {
                "type": "boolean",
                "default": false
            },
            "decimationTool": {
                "type": "string",
                "enum": [ "Meshlab", "RapidCompact" ],
                "default": "RapidCompact"
            },
            "segmentationStrength150": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "segmentationStrength1000": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.6
            },
            "packEffort": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "bakeOcclusion": {
                "type": "boolean",
                "default": true
            },
            "bakeNormals": {
                "type": "boolean",
                "default": true
            },
            "bakeTest": {
                "type": "boolean",
                "default": true
            },
            "maxRayDistance": {
                "type": "number",
                "default": 0
            },
            "occlusionRays": {
                "type": "integer",
                "minimum": 1,
                "maximum": 512,
                "default": 128
            },
            "diffuseMapQuality150": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 79
            },
            "diffuseMapQuality1000": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 89
            },
            "occlusionMapQuality150": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 59
            },
            "occlusionMapQuality1000": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 69
            },
            "normalMapQuality150": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 89
            },
            "normalMapQuality1000": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 79
            },
            "tangentSpaceNormals": {
                "type": "boolean",
                "default": true
            },
            "packContainer": {
                "type": "boolean",
                "default": true
            },
            "useCompression150": {
                "type": "boolean",
                "default": false
            },
            "useCompression1000": {
                "type": "boolean",
                "default": true
            },
            "alignCenter": {
                "type": "boolean",
                "default": false
            },
            "alignFloor": {
                "type": "boolean",
                "default": false
            },
            "generateBinary": {
                "type": "boolean",
                "default": true
            },
            "generateGltf": {
                "type": "boolean",
                "default": true
            }
        },
        "required": [
            "highPolyMeshFile",
            "documentFile"
        ],
        "additionalProperties": false
    },

    "steps": {
        "log": {
            "task": "Log",
            "description": "Enable logging services",
            "pre": {
                "baseName": "$baseName($firstTrue(baseName, highPolyMeshFile))",
                "baseMeshName": "$baseMeshName($firstTrue(baseName, highPolyMeshFile))",
                "baseMeshMapName150": "$baseMeshMapName($firstTrue(baseName, highPolyMeshFile), numFaces150, mapSize150)",
                "baseMeshMapName1000": "$baseMeshMapName($firstTrue(baseName, highPolyMeshFile), numFaces1000, mapSize1000)",
                "bakeDiffuse": "$exists(highPolyDiffuseMapFile)"
            },
            "parameters": {
                "logToConsole": true,
                "reportFile": "baseName & '-report.json'"
            },
            "success": "'pickup'",
            "failure": "$failure"
        },
        "pickup": {
            "task": "Pickup",
            "description": "Fetch input files from client",
            "pre": {
                "baseName": "$baseName($firstTrue(baseName, highPolyMeshFile))"
            },
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(pickupPath, $currentDir)",
                "files": {
                    "highPolyMeshFile": "highPolyMeshFile",
                    "inputMTLFile": "inputMTLFile",
                    "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                    "documentFile": "documentFile"
                }
            },
            "success": "'reorient-master'",
            "failure": "$failure"
        },
        "reorient-master": {
            "task": "ReorientMesh",
            "description": "Reorient Master mesh to match Voyager orientation",
            "pre": {
                "deliverables": {
                    "reorientedMeshFileMaster": "$firstTrue(highPolyMeshFile, baseName & '-master-geometry.obj')"
                }
            },
            "parameters": {
                "inputMeshFile": "highPolyMeshFile",
                "inputVoyagerFile": "documentFile",
                "outputMeshFile": "deliverables.reorientedMeshFileMaster"
            },
            "success": "'inspect-mesh'",
            "failure": "$failure"
        },
        "decimate-rapid-150": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact",
            "pre": {
                "decimatedMeshFile": "baseName & '-decimated-rapid.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces150",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom-150'",
            "failure": "'decimate-meshlab-150'"
        },
        "decimate-meshlab-150": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab",
            "pre": {
                "decimatedMeshFile": "baseName & '-decimated-meshlab-150.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces150",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": "tangentSpaceNormals"
            },
            "success": "'unwrap-rizom-150'",
            "failure": "$failure"
        },
        "unwrap-rizom-150": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV",
            "pre": {
                "unwrappedMeshFbxFile": "baseName & '-150k.fbx'",
                "deliverables": {
                    "scene_unwrappedMesh": "baseName & '-150k.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "deliverables.scene_unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSize150",
                "segmentationStrength": "segmentationStrength150",
                "packEffort": "packEffort"
            },
            "success": "'inspect-unwrapped-150'",
            "failure": "$failure"
        },
        "inspect-unwrapped-150": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake",
            "parameters": {
                "meshFile": "deliverables.scene_unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake-150'",
            "failure": "$failure"
        },
        "bake-150": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal",
            "pre": {
                "mapBaseName": "baseMeshMapName150 & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "highPolyMeshFile",
                "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSize150",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": "bakeOcclusion",
                "bakeNormals": "bakeNormals",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": "tangentSpaceNormals",
                "timeout": 1200
            },
            "post": {
                "deliverables": {
                    "diffuseMapUncompressed150": "bakeDiffuse ? (baseMeshMapName150 & '-diffuse.png') : ''",
                    "occlusionMapUncompressed150": "bakeOcclusion ? (baseMeshMapName150 & '-occlusion.png') : ''",
                    "normalMapUncompressed150": "bakeNormals ? (baseMeshMapName150 & '-normals.png') : ''",
                    "testMap150": "bakeTest ? (baseMeshMapName150 & '-test.png') : ''"
                }
            },
            "success": "'convert-diffuse-map-high'",
            "failure": "$failure"
        },
        "convert-diffuse-map-high": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "deliverables": {
                    "scene_diffuseMapHigh": "baseMeshMapName150 & '-diffuse.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.diffuseMapUncompressed150",
                "outputImageFile": "deliverables.scene_diffuseMapHigh",
                "quality": "diffuseMapQuality150"
            },
            "success": "'convert-occlusion-map-high'",
            "failure": "$failure"
        },
        "convert-occlusion-map-high": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map High",
            "skip": "$not(bakeOcclusion)",
            "pre": {
                "deliverables": {
                    "scene_occlusionMapHigh": "baseMeshMapName150 & '-occlusion.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.occlusionMapUncompressed150",
                "outputImageFile": "deliverables.scene_occlusionMapHigh",
                "quality": "occlusionMapQuality150"
            },
            "success": "'convert-normal-map-high'",
            "failure": "$failure"
        },
        "convert-normal-map-high": {
            "task": "ConvertImage",
            "description": "Convert Normal Map High",
            "skip": "$not(bakeNormals)",
            "pre": {
                "deliverables": {
                    "scene_normalMapHigh": "baseMeshMapName150 & '-normals.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.normalMapUncompressed150",
                "outputImageFile": "deliverables.scene_normalMapHigh",
                "quality": "normalMapQuality150"
            },
            "success": "'web-asset-glb-high'",
            "failure": "$failure"
        },
        "web-asset-glb-high": {
            "task": "WebAsset",
            "description": "Create binary, compressed, embedded glTF asset (high)",
            "skip": "$not(generateBinary)",
            "pre": {
                "deliverables": {
                    "scene_webAssetHighGlb": "baseMeshMapName150 & '.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.scene_webAssetHighGlb",
                "meshFile": "deliverables.scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? deliverables.scene_diffuseMapHigh : ''",
                "occlusionMapFile": "bakeOcclusion ? deliverables.scene_occlusionMapHigh : ''",
                "normalMapFile": "bakeNormals ? deliverables.scene_normalMapHigh : ''",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression150",
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'web-asset-gltf-high'",
            "failure": "$failure"
        },
        "web-asset-gltf-high": {
            "task": "WebAsset",
            "description": "Create glTF asset (high)",
            "skip": "$not(generateGltf)",
            "pre": {
                "deliverables": {
                    "scene_webAssetHighGltf": "baseMeshMapName150 & '.gltf'",
                    "scene_webAssetHighBin": "baseMeshMapName150 & '.bin'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.scene_webAssetHighGltf",
                "meshFile": "deliverables.scene_unwrappedMesh",
                "diffuseMapFile": "bakeDiffuse ? deliverables.scene_diffuseMapHigh : ''",
                "occlusionMapFile": "bakeOcclusion ? deliverables.scene_occlusionMapHigh : ''",
                "normalMapFile": "bakeNormals ? deliverables.scene_normalMapHigh : ''",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression150",
                "compressionLevel": 10,
                "embedMaps": false,
                "writeBinary": false
            },
            "success": "'delivery'",
            "failure": "$failure"
        },
        "inspect-mesh": {
            "task": "InspectMesh",
            "description": "Inspect mesh health and statistics",
            "skip": "$not(inspectMesh)",
            "pre": {
                "deliverables": {
                    "inspectionReport": "inspectMesh ? baseName & '-inspection.json' : ''"
                }
            },
            "parameters": {
                "meshFile": "highPolyMeshFile",
                "reportFile": "deliverables.inspectionReport"
            },
            "success": "'remesh-hd'",
            "failure": "$failure"
        },
        "remesh-hd": {
            "task": "Remesh",
            "description": "Generate a new quad-based mesh of the master for 1000k obj",
            "skip": "remeshFaces < 1",
            "pre": {
                "deliverables": {
                    "remeshedMeshFile": "$baseMeshName(baseName, remeshFaces) & '-1000k-remeshed.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "deliverables.remeshedMeshFile",
                "numFaces": "numFaces1000"
            },
            "post": {
                "processedMeshFile": "deliverables.remeshedMeshFile"
            },
            "success": "decimationTool = 'RapidCompact' ? 'decimate-rapid-hd' : 'decimate-meshlab-hd'",
            "failure": "$failure"
        },
        "decimate-rapid-hd": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact for 1000k obj",
            "pre": {
                "decimatedMeshFile": "baseName & '-1000k-decimated-rapid.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces1000",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom-hd'",
            "failure": "'decimate-meshlab-hd'"
        },
        "decimate-meshlab-hd": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab for 1000k obj",
            "pre": {
                "decimatedMeshFile": "baseName & '-1000k-decimated-meshlab.obj'"
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(processedMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces1000",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": "tangentSpaceNormals"
            },
            "success": "'unwrap-rizom-hd'",
            "failure": "$failure"
        },
        "unwrap-rizom-hd": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV for 1000k obj",
            "pre": {
                "unwrappedMeshFbxFile": "baseName & '-1000k.fbx'",
                "deliverables": {
                    "unwrappedMesh": "baseName & '-1000k.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "deliverables.unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSize1000",
                "segmentationStrength": "segmentationStrength1000",
                "packEffort": "packEffort",
                "timeout": 1800
            },
            "success": "'inspect-unwrapped-hd'",
            "failure": "$failure"
        },
        "inspect-unwrapped-hd": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake for 1000k obj",
            "parameters": {
                "meshFile": "deliverables.unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.01"
            },
            "success": "'bake-hd'",
            "failure": "$failure"
        },
        "bake-hd": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal for 1000k obj",
            "pre": {
                "mapBaseName": "baseMeshMapName1000 & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "highPolyMeshFile",
                "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSize1000",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": "bakeOcclusion",
                "bakeNormals": "bakeNormals",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": "tangentSpaceNormals",
                "timeout": 3600
            },
            "post": {
                "deliverables": {
                    "diffuseMapUncompressed": "bakeDiffuse ? (baseName & '-1000k-8192-diffuse.png') : ''",
                    "occlusionMapUncompressed": "bakeOcclusion ? (baseName & '-1000k-8192-occlusion.png') : ''",
                    "normalMapUncompressed": "bakeNormals ? (baseName & '-1000k-8192-normals.png') : ''",
                    "testMap": "bakeTest ? (baseMeshMapName1000 & '-test.png') : ''"
                }
            },
            "success": "'convert-diffuse-map-hd'",
            "failure": "$failure"
        },
        "convert-diffuse-map-hd": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map for 1000k obj",
            "skip": "$not(bakeDiffuse)",
            "pre": {
                "deliverables": {
                    "diffuseMap": "baseName & '-1000k-8192-diffuse.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.diffuseMapUncompressed",
                "outputImageFile": "deliverables.diffuseMap",
                "quality": "diffuseMapQuality1000"
            },
            "success": "'convert-occlusion-map-hd'",
            "failure": "$failure"
        },
        "convert-occlusion-map-hd": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map for 1000k obj",
            "skip": "$not(bakeOcclusion)",
            "pre": {
                "deliverables": {
                    "occlusionMap": "baseName & '-1000k-8192-occlusion.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.occlusionMapUncompressed",
                "outputImageFile": "deliverables.occlusionMap",
                "quality": "occlusionMapQuality1000"
            },
            "success": "'convert-normal-map-hd'",
            "failure": "$failure"
        },
        "convert-normal-map-hd": {
            "task": "ConvertImage",
            "description": "Convert Normal Map for 1000k obj",
            "skip": "$not(bakeNormals)",
            "pre": {
                "deliverables": {
                    "normalMap": "baseName & '-1000k-8192-normals.jpg'"
                }
            },
            "parameters": {
                "inputImageFile": "deliverables.normalMapUncompressed",
                "outputImageFile": "deliverables.normalMap",
                "quality": "normalMapQuality1000"
            },
            "success": "'web-asset-hd'",
            "failure": "$failure"
        },
        "web-asset-hd": {
            "task": "WebAsset",
            "description": "Create glTF asset for 1000k obj",
            "pre": {
                "deliverables": {
                    "webAsset": "baseName & (packContainer ? '-highest.glb' : '-1000k-8192.gltf')",
                    "webAssetBin": "packContainer ? '' : (baseName & '-1000k-8192.bin')"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAsset",
                "meshFile": "deliverables.unwrappedMesh",
                "diffuseMapFile": "deliverables.diffuseMap",
                "occlusionMapFile": "deliverables.occlusionMap",
                "normalMapFile": "deliverables.normalMap",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": "useCompression150",
                "compressionLevel": 6,
                "embedMaps": "packContainer",
                "writeBinary": "packContainer"
            },
            "success": "'web-asset-glb-hd'",
            "failure": "$failure"
        },
        "web-asset-glb-hd": {
            "task": "WebAsset",
            "description": "Create binary, compressed, embedded glTF asset for 1000k",
            "pre": {
                "deliverables": {
                    "webAssetGlb": "baseName & '-1000k-8192.glb'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlb",
                "meshFile": "deliverables.unwrappedMesh",
                "diffuseMapFile": "deliverables.diffuseMap",
                "occlusionMapFile": "deliverables.occlusionMap",
                "normalMapFile": "deliverables.normalMap",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "zoneMapFile": "zoneMapFile",
                "alignCenter": "alignCenter",
                "alignFloor": "alignFloor",
                "useCompression": "useCompression150",
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'web-asset-gltf-hd'",
            "failure": "$failure"

        },
        "web-asset-gltf-hd": {
            "task": "WebAsset",
            "description": "Create glTF asset for 1000k",
            "pre": {
                "deliverables": {
                    "webAssetGltf": "baseName & '-1000k-8192.gltf'",
                    "webAssetBin": "baseName & '-1000k-8192.bin'"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGltf",
                "meshFile": "deliverables.unwrappedMesh",
                "diffuseMapFile": "deliverables.diffuseMap",
                "occlusionMapFile": "deliverables.occlusionMap",
                "normalMapFile": "deliverables.normalMap",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "zoneMapFile": "zoneMapFile",
                "alignCenter": "alignCenter",
                "alignFloor": "alignFloor",
                "useCompression": "useCompression150",
                "compressionLevel": 10,
                "embedMaps": false,
                "writeBinary": false
            },
            "success": "'delivery'",
            "failure": "$failure"
        },
        "delivery": {
            "task": "Delivery",
            "description": "Send result files back to client",
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(deliveryPath, pickupPath, $currentDir)",
                "files": "deliverables"
            },
            "success": "$success",
            "failure": "$failure"
        }
    }
}
