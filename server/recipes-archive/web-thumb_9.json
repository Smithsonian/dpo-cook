{
    "id": "05debd35-efab-40d4-9145-cb6d819d1859",
    "name": "web-thumb",
    "description": "Generates thumbnail web asset",
    "version": "9",
    "start": "log",

    "parameterSchema": {
        "type": "object",
        "properties": {
            "highPolyMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "highPolyDiffuseMapFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "intermediateMeshFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "documentFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "metaDataFile": {
                "type": "string",
                "minLength": 1,
                "format": "file"
            },
            "pickupPath": {
                "type": "string",
                "minLength": 1
            },
            "deliveryPath": {
                "type": "string",
                "minLength": 1
            },
            "transportMethod": {
                "type": "string",
                "enum": [ "none", "local" ],
                "default": "none"
            },
            "baseName": {
                "type": "string",
                "minLength": 1
            },
            "modelIndex": {
                "type": "integer",
                "minimum": 0,
                "default": 0
            },
            "units": {
                "type": "string",
                "enum": [ "mm", "cm", "m", "in", "ft", "yd" ],
                "default": "cm"
            },
            "inspectMesh": {
                "type": "boolean",
                "default": false
            },
            "cleanupMesh": {
                "type": "boolean",
                "default": true
            },
            "numFaces": {
                "type": "integer",
                "minimum": 10000,
                "multipleOf": 1000,
                "default": 50000
            },
            "mapSize": {
                "type": "integer",
                "minimum": 128,
                "maximum": 8192,
                "default": 1024
            },
            "segmentationStrength": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.9
            },
            "packEffort": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.7
            },
            "bakeOcclusion": {
                "type": "boolean",
                "default": true
            },
            "bakeNormals": {
                "type": "boolean",
                "default": false
            },
            "bakeTest": {
                "type": "boolean",
                "default": false
            },
            "maxRayDistance": {
                "type": "number",
                "default": 0
            },
            "occlusionRays": {
                "type": "integer",
                "minimum": 1,
                "maximum": 512,
                "default": 128
            },
            "diffuseMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 59
            },
            "occlusionMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 59
            },
            "normalMapQuality": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 69
            },
            "tangentSpaceNormals": {
                "type": "boolean",
                "default": true
            }
        },
        "required": [
            "highPolyMeshFile"
        ],
        "additionalProperties": false
    },

    "steps": {
        "log": {
            "task": "Log",
            "description": "Start logging to file",
            "pre": {
                "baseName": "$baseName($firstTrue(baseName, highPolyMeshFile))",
                "baseMeshName": "$baseMeshName($firstTrue(baseName, highPolyMeshFile), numFaces)",
                "baseMeshMapName": "$baseMeshMapName($firstTrue(baseName, highPolyMeshFile), numFaces, mapSize)",
                "bakeDiffuse": "$exists(highPolyDiffuseMapFile)"
            },
            "parameters": {
                "logToConsole": true,
                "reportFile": "baseMeshMapName & '-web-thumb-report.json'"
            },
            "success": "'pickup'",
            "failure": "$failure"
        },
        "pickup": {
            "task": "Pickup",
            "description": "Fetch input files from client",
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(pickupPath, $currentDir)",
                "files": {
                    "highPolyMeshFile": "highPolyMeshFile",
                    "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                    "intermediateMeshFile": "intermediateMeshFile",
                    "documentFile": "documentFile",
                    "metaDataFile": "metaDataFile"
                }
            },
            "success": "'decimate-meshlab'",
            "failure": "$failure"
        },
        "decimate-meshlab": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using Meshlab",
            "pre": {
                "decimatedMeshFile": "baseMeshName & '-decimated-meshlab.obj'",
                "deliverables": {
                    "inspectionReport": "inspectMesh ? baseName & '-inspection.json' : ''"
                }
            },
            "parameters": {
                "inputMeshFile": "$firstTrue(intermediateMeshFile, highPolyMeshFile)",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces",
                "cleanup": "cleanupMesh",
                "preserveTopology": true,
                "preserveBoundaries": true,
                "preserveTexCoords": false,
                "computeVertexNormals": "tangentSpaceNormals",
                "inspectMesh": "deliverables.inspectionReport"
            },
            "success": "'unwrap-rizom'",
            "failure": "'decimate-rapid'"
        },
        "decimate-rapid": {
            "task": "DecimateMesh",
            "description": "Decimate mesh using RapidCompact",
            "pre": {
                "decimatedMeshFile": "baseMeshName & '-decimated-rapid.obj'"
            },
            "parameters": {
                "inputMeshFile": "highPolyMeshFile",
                "outputMeshFile": "decimatedMeshFile",
                "numFaces": "numFaces",
                "cleanup": "cleanupMesh",
                "preserveBoundaries": true,
                "tool": "'RapidCompact'"
            },
            "success": "'unwrap-rizom'",
            "failure": "$failure"
        },
        "unwrap-rizom": {
            "task": "UnwrapMesh",
            "description": "Unwrap mesh using RizomUV",
            "pre": {
                "unwrappedMeshFbxFile": "baseMeshName & '-unwrapped.fbx'",
                "deliverables": {
                    "unwrappedMesh": "baseMeshName & '-unwrapped.obj'"
                }
            },
            "parameters": {
                "inputMeshFile": "decimatedMeshFile",
                "outputMeshFile": "deliverables.unwrappedMesh",
                "saveFbx": true,
                "saveObj": true,
                "mapSize": "mapSize",
                "segmentationStrength": "segmentationStrength",
                "packEffort": "packEffort"
            },
            "success": "'inspect-unwrapped'",
            "failure": "$failure"
        },
        "inspect-unwrapped": {
            "task": "InspectMesh",
            "description": "Calculate mesh size and max. ray distance for bake",
            "parameters": {
                "meshFile": "deliverables.unwrappedMesh",
                "tool": "'MeshSmith'"
            },
            "post": {
                "autoRayDistance": "$min($result.inspection.scene.geometry.size) * 0.002"
            },
            "success": "'bake'",
            "failure": "$failure"
        },
        "bake": {
            "task": "BakeMaps",
            "description": "Bake diffuse, normal and occlusion maps using xNormal",
            "pre": {
                "mapBaseName": "baseMeshMapName & '.png'"
            },
            "parameters": {
                "highPolyMeshFile": "highPolyMeshFile",
                "highPolyDiffuseMapFile": "highPolyDiffuseMapFile",
                "lowPolyUnwrappedMeshFile": "unwrappedMeshFbxFile",
                "mapBaseName": "mapBaseName",
                "mapSize": "mapSize",
                "maxRayDistance": "maxRayDistance > 0 ? maxRayDistance : autoRayDistance",
                "bakeDiffuse": "bakeDiffuse",
                "bakeOcclusion": "bakeOcclusion",
                "bakeNormals": "bakeNormals",
                "bakeTest": "bakeTest",
                "occlusionRays": "occlusionRays",
                "tangentSpaceNormals": "tangentSpaceNormals",
                "timeout": 900
            },
            "success": "'convert-occlusion-map'",
            "failure": "$failure"
        },
        "convert-occlusion-map": {
            "task": "ConvertImage",
            "description": "Convert Occlusion Map",
            "parameters": {
                "inputImageFile": "baseMeshMapName & '-occlusion.png'",
                "outputImageFile": "baseMeshMapName & '-occlusion.jpg'",
                "quality": "occlusionMapQuality"
            },
            "success": "'convert-normal-map'",
            "failure": "'convert-normal-map'"
        },
        "convert-normal-map": {
            "task": "ConvertImage",
            "description": "Convert Normal Map",
            "parameters": {
                "inputImageFile": "baseMeshMapName & '-normals.png'",
                "outputImageFile": "baseMeshMapName & '-normals.jpg'",
                "quality": "normalMapQuality"
            },
            "success": "'convert-diffuse-map'",
            "failure": "'convert-diffuse-map'"
        },
        "convert-diffuse-map": {
            "task": "ConvertImage",
            "description": "Convert Diffuse Map",
            "parameters": {
                "inputImageFile": "baseMeshMapName & '-diffuse.png'",
                "outputImageFile": "baseMeshMapName & '-diffuse.jpg'",
                "quality": "diffuseMapQuality"
            },
            "success": "'model-glb'",
            "failure": "'model-glb'"
        },
        "model-glb": {
            "task": "WebAsset",
            "description": "Create binary, compressed, embedded glTF asset",
            "pre": {
                "deliverables": {
                    "webAssetGlb": "baseMeshMapName & '-web-thumb.glb'",
                    "diffuseMap": "bakeDiffuse ? (baseMeshMapName & '-diffuse.jpg') : ''",
                    "occlusionMap": "bakeOcclusion ? (baseMeshMapName & '-occlusion.jpg') : ''",
                    "normalMap": "bakeNormals ? (baseMeshMapName & '-normals.jpg') : ''"
                }
            },
            "parameters": {
                "outputFile": "deliverables.webAssetGlb",
                "meshFile": "deliverables.unwrappedMesh",
                "diffuseMapFile": "deliverables.diffuseMap",
                "occlusionMapFile": "deliverables.occlusionMap",
                "normalMapFile": "deliverables.normalMap",
                "objectSpaceNormals": "$not(tangentSpaceNormals)",
                "useCompression": true,
                "compressionLevel": 10,
                "embedMaps": true,
                "writeBinary": true
            },
            "success": "'update-document'",
            "failure": "$failure"
        },
        "update-document": {
            "task": "Document",
            "description": "Add web model to document.json descriptor file",
            "pre": {
                "deliverables": {
                    "document": "$firstTrue(documentFile, baseName & '-document.json')"
                }
            },
            "parameters": {
                "documentFile": "deliverables.document",
                "metaDataFile": "metaDataFile",
                "modelIndex": "modelIndex",
                "modelName": "baseName",
                "units": "units",
                "derivativeQuality": "'Thumb'",
                "modelFile": "deliverables.webAssetGlb",
                "numFaces": "numFaces",
                "mapSize": "mapSize"
            },
            "success": "'delivery'",
            "failure": "$failure"
        },
        "delivery": {
            "task": "Delivery",
            "description": "Send result files back to client",
            "parameters": {
                "method": "transportMethod",
                "path": "$firstTrue(deliveryPath, pickupPath, $currentDir)",
                "files": "deliverables"
            },
            "success": "$success",
            "failure": "$failure"
        }
    }
}